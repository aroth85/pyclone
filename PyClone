#!/usr/bin/env python

#=======================================================================================================================
# PyClone
# Author : Andrew Roth
#=======================================================================================================================
import argparse

from pyclone.run import build_mutations_file, cluster_trace, plot_cellular_frequencies, plot_similarity_matrix, \
                        run_analysis, plot_multi_sample

parser = argparse.ArgumentParser(prog='PyClone')

parser.add_argument('--version', action='version', version='PyClone-0.12.1')

subparsers = parser.add_subparsers()

#---------------------------------------------------------------------------------------------------------------------- 
analyse_parser = subparsers.add_parser('analyse', help='''Start a new PyClone analysis.''')

analyse_parser.add_argument('config_file',
                            help='Path to tab separated input file. See examples for format.')

analyse_parser.add_argument('--seed', default=None, type=int,
                            help='''Set random seed so results can be reproduced. By default a random seed is
                            chosen.''')

analyse_parser.set_defaults(func=run_analysis)

#---------------------------------------------------------------------------------------------------------------------- 
build_prior_parser = subparsers.add_parser('build_mutations_file',
                                           help='''Build a YAML format file with mutation data and states prior to be
                                           used for PyClone analysis.''')

build_prior_parser.add_argument('in_file',
                                help='''Path to tab separated input file. The input file should have header and the
                                following columns: mutation_id, ref_counts, var_counts, normal_cn, minor_cn, major_cn.
                                Any additional columns will be ignored. See examples for format.''')

build_prior_parser.add_argument('out_file',
                                help='''Path where YAML formatted PyClone input file will be written.''')

build_prior_parser.add_argument('--ref_prior', choices=['normal', 'variant', 'normal_variant'], default='normal_variant',
                                help='''Method for setting the copy number of the reference population. "normal" sets it
                                to the value of "normal_cn" in the input file. "variant" sets it to the sum of
                                "minor_cn" and "major_cn" in the input file. "normal_variant" considers both options
                                with equal prior weight. This option only has an effect if "total_copy_number" or
                                "no_zygosity is used for the var_prior option. Default normal_variant.''')

build_prior_parser.add_argument('--var_prior',
                                choices=['AB', 'BB', 'no_zygosity', 'parental_copy_number', 'total_copy_number'],
                                default='total_copy_number', help='''Method used to set the possible genotypes  of the
                                variant population. "AB" assumes all mutations have the AB genotype. "BB" assumes all
                                mutations have the BB genotype. "no_zygosity" assumes all mutation have the genotype
                                with the predicted total copy number and one mutant allele i.e. AAB for a copy number 3
                                mutation. "parental_copy_number" sets considers all possible genotypes compatible with
                                the predicted parental copy number. "total_copy_number" considers all possible genotypes
                                compatible with the predicted total copy number. If reliable parental copy number is
                                available the parental_copy_number method should be chosen. Default is
                                total_copy_number.''')

build_prior_parser.set_defaults(func=build_mutations_file)

#---------------------------------------------------------------------------------------------------------------------- 
cluster_parser = subparsers.add_parser('cluster', help='''Cluster the results of a PyClone analysis.''')

cluster_parser.add_argument('config_file', 
                            help='''Path to configuration file used for analysis.''')

cluster_parser.add_argument('out_file',
                            help='Path to file where clustering results will be written.')

cluster_parser.add_argument('--method', default='mpear',
                            choices=['affinity_propogation', 'complete_linkage', 'dbscan', 'dynamic_tree_cut', 'mpear',
                                    'single_linkage', 'spectral_clustering'],
                            help='''Method used to cluster the PyClone trace file. Default is mpear.''')

cluster_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

cluster_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

cluster_parser.set_defaults(func=cluster_trace)

#---------------------------------------------------------------------------------------------------------------------- 
plot_cf_parser = subparsers.add_parser('plot_cellular_frequencies',
                                       help='''Plot the posterior densities of the cellular frequencies of the mutations
                                       from a PyClone analysis.''')

plot_cf_parser.add_argument('config_file', 
                            help='''Path to configuration file used for analysis.''')

plot_cf_parser.add_argument('out_dir',
                            help='Path to directory where plot files will be saved.')

plot_cf_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

plot_cf_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

plot_cf_parser.set_defaults(func=plot_cellular_frequencies)

#---------------------------------------------------------------------------------------------------------------------- 
plot_sm_parser = subparsers.add_parser('plot_similarity_matrix',
                                       help='''Plot a heat map of the posterior similarity matrix from a PyClone
                                       analysis.''')

plot_sm_parser.add_argument('config_file', 
                            help='''Path to configuration file used for analysis.''')

plot_sm_parser.add_argument('out_file',
                            help='Path to file where plot will be saved.')

plot_sm_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

plot_sm_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

plot_sm_parser.set_defaults(func=plot_similarity_matrix)

#---------------------------------------------------------------------------------------------------------------------- 
plot_ms_parser = subparsers.add_parser('plot_multi_sample',
                                       help='''Plot a parallel coordinates plot for the variant allelic prevalence or
                                       cellular prevalence colour code by cluster membership.''')

plot_ms_parser.add_argument('config_file', 
                            help='''Path to configuration file used for analysis.''')

plot_ms_parser.add_argument('plot_file', 
                            help='''Path where plot file will be written.''')

plot_ms_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

plot_ms_parser.add_argument('--clustering_method', default='mpear',
                            choices=['affinity_propogation', 'complete_linkage', 'dbscan', 'dynamic_tree_cut', 'mpear',
                                    'single_linkage', 'spectral_clustering'],
                            help='''Method used to cluster the PyClone trace. Default is mpear.''')

plot_ms_parser.add_argument('--prevalence', choices=['allelic', 'cellular'], default='cellular',
                            help='''Determines which prevalence values will be plotted, allelic or cellular. Default is
                            cellular.''')

plot_ms_parser.add_argument('--separate_lines', action='store_true', default=False,
                            help='''If set then each mutation will be plotted with a separate line.''')

plot_ms_parser.add_argument('--table_file', default=None,
                            help='''Path where a table of results used to plot the figure will be written. If this is
                            not set, no table file will be written.''')

plot_ms_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

plot_ms_parser.set_defaults(func=plot_multi_sample)

#---------------------------------------------------------------------------------------------------------------------- 
args = parser.parse_args()

args.func(args)
