#!/usr/bin/env python

#=======================================================================================================================
# PyClone
# Author : Andrew Roth
#=======================================================================================================================
import pyclone.run as run                        

import argparse


def main():
    parser = argparse.ArgumentParser(prog='PyClone')
    
    parser.add_argument('--version', action='version', version='PyClone-0.13.0')
    
    subparsers = parser.add_subparsers()
    
#---------------------------------------------------------------------------------------------------------------------- 
    analyse_parser = subparsers.add_parser(
        'analyse',
        help='''Run an MCMC sampler to sample from the posterior of the PyClone model.'''
    )
    
    _setup_analyse_parser(analyse_parser)

#---------------------------------------------------------------------------------------------------------------------- 
    analysis_pipeline_parser = subparsers.add_parser(
        'run_analysis_pipeline',
        help='''Run a full PyClone analysis.'''
    )
    
    _setup_analysis_pipeline_parser(analysis_pipeline_parser)
    
#---------------------------------------------------------------------------------------------------------------------- 
    build_prior_parser = subparsers.add_parser(
        'build_mutations_file',
        help='''Build a YAML format file with mutation data and states prior to be used for PyClone analysis.'''
    )
    
    _setup_build_prior_parser(build_prior_parser)
    
#---------------------------------------------------------------------------------------------------------------------- 
    cluster_parser = subparsers.add_parser(
        'cluster',
        help='''Cluster the results of a PyClone analysis.'''
    )
    
    _setup_cluster_parser(cluster_parser)
    
#---------------------------------------------------------------------------------------------------------------------- 
    plot_cf_parser = subparsers.add_parser(
        'plot_cellular_prevalence_posteriors',
        help='''Plot the posterior densities of the cellular frequencies of the mutations from a PyClone analysis.'''
    )
    
    _setup_plot_cf_parser(plot_cf_parser)

#---------------------------------------------------------------------------------------------------------------------- 
    cluster_plot_parser = subparsers.add_parser(
        'cluster_plot',
        help='''Plot features of the clusters.'''
    )
    
    _setup_cluster_plot_parser(cluster_plot_parser)

#---------------------------------------------------------------------------------------------------------------------- 
    loci_plot_parser = subparsers.add_parser(
        'loci_plot',
        help='''Plot features of the loci.'''
    )
    
    _setup_loci_plot_parser(loci_plot_parser)
    
#---------------------------------------------------------------------------------------------------------------------- 
    plot_sm_parser = subparsers.add_parser(
        'plot_similarity_matrix',
        help='''Plot a heat map of the posterior similarity matrix from a PyClone analysis.'''
    )
    
    _setup_plot_sm_parser(plot_sm_parser)

#---------------------------------------------------------------------------------------------------------------------- 
    plot_ms_parser = subparsers.add_parser(
        'plot_multi_sample',
        help='''Plot a parallel coordinates plot for the variant allelic prevalence or cellular prevalence colour code 
        by cluster membership.'''
    )
    
    _setup_plot_ms_parser(plot_ms_parser)
    
#----------------------------------------------------------------------------------------------------------------------
    build_table_parser = subparsers.add_parser(
        'build_table',
        help='''Build results table which contains cluster ids and (mean) cellular prevalence estimates.''')
    
    _setup_build_table_parser(build_table_parser)
    
#---------------------------------------------------------------------------------------------------------------------- 
    args = parser.parse_args()
    
    args.func(args)

def _setup_analyse_parser(parser):
   
    parser.add_argument(
        'config_file',
        help='''Path to tab separated input file. See examples for format.'''
    )
    
    _add_seed_args(parser)
    
    parser.set_defaults(func=run.run_analysis)

def _setup_analysis_pipeline_parser(parser):
   
    parser.add_argument(
        '--in_files',
        nargs='+',
        required=True,
        help='''Space delimited list of tsv format files with copy number and allele count information. See 
        build_mutations_file command for information.'''
    )
    
    parser.add_argument(
        '--working_dir',
        required=True,
        help='''Path of directory where analysis pipeline files will be placed.'''
    )
    
     
    parser.add_argument(
        '--tumour_contents',
        nargs='+',
        type=float,
        default=None,
        help='''Space delimited list of tumour contents. Should match the order of --in_files. If not given tumour 
        content is assumed to 1.0 in all samples.'''
    )
    
    parser.add_argument(
        '--samples',
        nargs='+', default=None, help='''Space delimited list of sample names. Should be in the same order as
        --in_files. If not set sample name will be inferred from file names and ordering in plots will be arbitrary.''')
    
    
    parser.add_argument(
        '--density',
        choices=['pyclone_binomial', 'pyclone_beta_binomial'],
        default='pyclone_beta_binomial',
        help='''Emission density for the model. Default is pyclone_beta_binomial.'''
    )

    parser.add_argument(
        '--num_iters',
        default=10000,
        type=int,
        help='''Number of iterations of the MCMC sampler to perform. Default is 10,000.'''
    )
    
    _add_prior_args(parser)
    
    _add_post_process_args(parser)
    
    _add_seed_args(parser)
    
    parser.add_argument(
        '--plot_file_format',
        default='pdf',
        choices=['pdf', 'svg'],
        help='''File format for plots. Default is pdf.'''
    )
   
    parser.set_defaults(func=run.run_analysis_pipeline)

def _setup_build_prior_parser(parser):    
    
    parser.add_argument(
        'in_file',
        help='''Path to tab separated input file. The input file should have header and the following columns: 
        mutation_id, ref_counts, var_counts, normal_cn, minor_cn, major_cn. Any additional columns will be ignored. 
        See examples for format.'''
    )
    
    parser.add_argument(
        'out_file',
        help='''Path where YAML formatted PyClone input file will be written.'''
    )
    
    _add_prior_args(parser)
    
    parser.set_defaults(func=run.build_mutations_file)

def _setup_cluster_parser(parser):
    
    parser.add_argument(
        'config_file',
        help='''Path to configuration file used for analysis.'''
    )
    
    parser.add_argument(
        'out_file',
        help='Path to file where clustering results will be written.'
    )
    
    _add_post_process_args(parser)
    
    parser.set_defaults(func=run.write_clusters_trace)

def _setup_plot_cf_parser(parser):
    
    _add_config_file_args(parser)
  
    parser.add_argument(
        'out_dir',
        help='Path to directory where plot files will be saved.'
    )
    
    _add_post_process_args(parser)

    parser.add_argument(
        '--file_format',
        default='pdf',
        choices=['pdf', 'png', 'svg'],
        help='''File format used for to plot files. Default is `pdf` and `png` is suggested for large datasets to reduce
         figure size.''')
    
    parser.set_defaults(func=run.plot_cellular_prevalence_posteriors)

def _setup_plot_sm_parser(parser):
    
    _add_config_file_args(parser)
    
    _add_plot_out_file_args(parser)
    
    _add_post_process_args(parser)
     
    parser.set_defaults(func=run.plot_similarity_matrix)

def _setup_plot_ms_parser(parser):
    
    _add_config_file_args(parser)
    
    _add_plot_out_file_args(parser)
    
    _add_post_process_args(parser)
    
    parser.add_argument(
        '--samples',
        default=None,
        nargs='+',
        help='''Samples to plot. Samples will be plotted left to right in the order given.'''
    )
    
    parser.add_argument(
        '--separate_lines',
        action='store_true',
        default=False,
        help='''If set then each mutation will be plotted with a separate line.'''
    )
    
    parser.add_argument(
        '--y_value',
        choices=['cellular_prevalence', 'variant_allele_frequency'],
        default='cellular_prevalence',
        help='''Determines which values will be plotted on the y-axis. Default is cellular_prevalence.'''
    )
    
    parser.set_defaults(func=run.plot_multi_sample)

def _setup_build_table_parser(parser):
    
    _add_config_file_args(parser)
  
    parser.add_argument(
        'out_file',
        help='''Path where table will be written in tsv format.'''
    )
  
    parser.add_argument(
        '--old_style', 
        action='store_true', 
        default=False,
        help='''If set old style (0.12.x) table will be output.'''
    )
    
    _add_post_process_args(parser)
 
    parser.set_defaults(func=run.write_multi_sample_table)

def _setup_cluster_plot_parser(parser):

    _add_config_file_args(parser)
    
    _add_plot_out_file_args(parser)
        
    parser.add_argument(
        '--plot_type',
        choices=['density', 'parallel_coordinates', 'scatter'],
        default='density',
        required=True,
        help='''Determines which style of plot will be done.'''
    )    
    
    _add_post_process_args(parser)
 
    parser.add_argument(
        '--mesh_size',
        default=101,
        type=int,
        help='''Number of points to use for approximating the cluster posteriors. Default is 101.'''
    )
    
    parser.add_argument(
        '--min_cluster_size',
        default=0,
        type=int,
        help='''Clusters with fewer mutations than this value will not be plotted.'''
    )
       
    parser.add_argument(
        '--samples',
        default=None,
        nargs='+',
        help='''Samples to plot and order to plot them in.'''
    )
    
    parser.set_defaults(func=run.cluster_plot)

def _setup_loci_plot_parser(parser):
    
    _add_config_file_args(parser)
    
    _add_plot_out_file_args(parser)
    
    parser.add_argument(
        '--plot_type',
        choices=['density', 'scatter', 'similarity_matrix', 'vaf_scatter'],
        default='density',
        required=True,
        help='''Determines which style of plot will be done.'''
    )
       
    _add_post_process_args(parser)
    
    _add_min_cluster_size_args(parser)

    parser.add_argument(
        '--samples',
        default=None,
        nargs='+',
        help='''Samples to plot and order to plot them in.'''
    )
    
    parser.set_defaults(func=run.loci_plot)
    
def _add_config_file_args(parser):
     
     parser.add_argument(
        '--config_file', required=True,
        help='''Path to configuration file used for analysis.'''
    )
     
def _add_plot_out_file_args(parser):
    
    parser.add_argument(
        '--plot_file', required=True,
        help='Path to file where plot will be saved. Format can be controlled by changing file extension.'
    )
    
def _add_seed_args(parser):
    
    parser.add_argument(
        '--seed',
        default=None,
        type=int,
        help='''Set random seed so results can be reproduced. By default a random seed is chosen.'''
    )
    
def _add_prior_args(parser):  
    
    parser.add_argument(
        '--var_prior',
        choices=['major_copy_number', 'parental_copy_number', 'total_copy_number'],
        default='major_copy_number',
        help='''Method used to set the possible genotypes. See online help for description. Default is major_copy_number.'''
    )

def _add_post_process_args(parser):
    
    parser.add_argument(
        '--burnin',
        default=0,
        type=int,
        help='''Number of samples to discard as burning for the MCMC chain. Default is 0.'''
    )
    
    parser.add_argument(
        '--thin',
        default=1,
        type=int,
        help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample after burning will be 
        used for inference. Default is 1.'''
    )

def _add_min_cluster_size_args(parser):
    parser.add_argument(
        '--min_cluster_size',
        default=0,
        type=int,
        help='''Clusters with fewer mutations than this value will not be plotted.'''
    )    

if __name__ == '__main__':
    main()
