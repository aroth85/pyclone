#!/usr/bin/env python

#=======================================================================================================================
# PyClone
# Author : Andrew Roth
#=======================================================================================================================
from pyclone.run import build_multi_sample_table, build_mutations_file, cluster_trace, plot_cellular_frequencies, \
                        plot_similarity_matrix, run_analysis, plot_multi_sample

import argparse

parser = argparse.ArgumentParser(prog='PyClone')

parser.add_argument('--version', action='version', version='PyClone-0.12.4')

subparsers = parser.add_subparsers()

#---------------------------------------------------------------------------------------------------------------------- 
analyse_parser = subparsers.add_parser('analyse', help='''Start a new PyClone analysis.''')

analyse_parser.add_argument('config_file',
                            help='Path to tab separated input file. See examples for format.')

analyse_parser.add_argument('--seed', default=None, type=int,
                            help='''Set random seed so results can be reproduced. By default a random seed is
                            chosen.''')

analyse_parser.add_argument('--alpha_init', type=float, default=1.0,
                            help='''Initial value of DP concentration parameter. Default is 1.0.''')

analyse_parser.add_argument('--alpha_rate', type=float, default=1e-3,
                            help='''Shape parameter in prior of DP concentration parameter. Default is 1e-3.''')

analyse_parser.add_argument('--alpha_shape', type=float, default=1.0,
                            help='''Shape parameter in prior of DP concentration parameter. Default is 1.0.''')

analyse_parser.add_argument('--base_measure_alpha', type=float, default=1.0,
                            help='''Value of alpha parameter in Beta base measure for cellular prevalence. Default is
                            1.0.''')

analyse_parser.add_argument('--base_measure_beta', type=float, default=1.0,
                            help='''Value of beta parameter in Beta base measure for cellular prevalence. Default is
                            1.0.''')

analyse_parser.add_argument('--error_rate', type=float, default=1e-3,
                            help='''Expected sequencing error rate. Default is 1e-3.''')

analyse_parser.add_argument('--precision_init', type=float, default=1.0,
                            help='''Initial_value of precision parameter in Beta-Binomial emission distribution.''')

analyse_parser.add_argument('--precision_rate', type=float, default=1e-4,
                            help='''Rate parameter in prior of Beta-Binomial concentration parameter. Default is
                            1e-4.''')

analyse_parser.add_argument('--precision_shape', type=float, default=1.0,
                            help='''Shape parameter in prior of Beta-Binomial concentration parameter. Default is
                            1.0.''')

analyse_parser.add_argument('--precision_proposal_precision', type=float, default=0.1,
                            help='''Precision of Gaussian random walk for sampling precision parameter of Beta-Binomial
                            concentration parameter. Default is 0.1.''')

analyse_parser.set_defaults(func=run_analysis)

#---------------------------------------------------------------------------------------------------------------------- 
cluster_parser = subparsers.add_parser('cluster', help='''Cluster the results of a PyClone analysis.''')

cluster_parser.add_argument('config_file',
                            help='''Path to configuration file used for analysis.''')

cluster_parser.add_argument('out_file',
                            help='Path to file where clustering results will be written.')

cluster_parser.add_argument('--method', default='mpear',
                            choices=['affinity_propogation', 'complete_linkage', 'dbscan', 'dynamic_tree_cut', 'mpear',
                                    'single_linkage', 'spectral_clustering'],
                            help='''Method used to cluster the PyClone trace file. Default is mpear.''')

cluster_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

cluster_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

cluster_parser.set_defaults(func=cluster_trace)

#---------------------------------------------------------------------------------------------------------------------- 
plot_cf_parser = subparsers.add_parser('plot_cellular_frequencies',
                                       help='''Plot the posterior densities of the cellular frequencies of the mutations
                                       from a PyClone analysis.''')

plot_cf_parser.add_argument('config_file',
                            help='''Path to configuration file used for analysis.''')

plot_cf_parser.add_argument('out_dir',
                            help='Path to directory where plot files will be saved.')

plot_cf_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

plot_cf_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

plot_cf_parser.set_defaults(func=plot_cellular_frequencies)

#---------------------------------------------------------------------------------------------------------------------- 
plot_sm_parser = subparsers.add_parser('plot_similarity_matrix',
                                       help='''Plot a heat map of the posterior similarity matrix from a PyClone
                                       analysis.''')

plot_sm_parser.add_argument('config_file',
                            help='''Path to configuration file used for analysis.''')

plot_sm_parser.add_argument('out_file',
                            help='Path to file where plot will be saved.')

plot_sm_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

plot_sm_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

plot_sm_parser.set_defaults(func=plot_similarity_matrix)

#---------------------------------------------------------------------------------------------------------------------- 
plot_ms_parser = subparsers.add_parser('plot_multi_sample',
                                       help='''Plot a parallel coordinates plot for the variant allelic prevalence or
                                       cellular prevalence colour code by cluster membership.''')

plot_ms_parser.add_argument('config_file',
                            help='''Path to configuration file used for analysis.''')

plot_ms_parser.add_argument('plot_file',
                            help='''Path where plot file will be written.''')

plot_ms_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

plot_ms_parser.add_argument('--clustering_method', default='mpear',
                            choices=['affinity_propogation', 'complete_linkage', 'dbscan', 'dynamic_tree_cut', 'mpear',
                                    'single_linkage', 'spectral_clustering'],
                            help='''Method used to cluster the PyClone trace. Default is mpear.''')

plot_ms_parser.add_argument('--prevalence', choices=['allelic', 'cellular'], default='cellular',
                            help='''Determines which prevalence values will be plotted, allelic or cellular. Default is
                            cellular.''')

plot_ms_parser.add_argument('--separate_lines', action='store_true', default=False,
                            help='''If set then each mutation will be plotted with a separate line.''')

plot_ms_parser.add_argument('--table_file', default=None,
                            help='''Path where a table of results used to plot the figure will be written. If this is
                            not set, no table file will be written.''')

plot_ms_parser.add_argument('--thin', default=1, type=int,
                            help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                            after burning will be used for inference. Default is 1.''')

plot_ms_parser.set_defaults(func=plot_multi_sample)

#---------------------------------------------------------------------------------------------------------------------- 
build_table_parser = subparsers.add_parser('build_table',
                                           help='''Build results table which contains cluster ids and (mean) cellular
                                           prevalence estimates.''')

build_table_parser.add_argument('config_file',
                                help='''Path to configuration file used for analysis.''')

build_table_parser.add_argument('out_file',
                                help='''Path where table will be written in tsv format.''')

build_table_parser.add_argument('--burnin', default=0, type=int,
                            help='''Number of samples to discard as burning for the MCMC chain. Default is 0.''')

build_table_parser.add_argument('--clustering_method', default='mpear',
                                choices=['affinity_propogation', 'complete_linkage', 'dbscan', 'dynamic_tree_cut',
                                         'mpear', 'single_linkage', 'spectral_clustering'],
                                help='''Method used to cluster the PyClone trace. Default is mpear.''')

build_table_parser.add_argument('--prevalence', choices=['allelic', 'cellular'], default='cellular',
                                help='''Determines which prevalence values will be plotted, allelic or cellular. Default
                                is cellular.''')

build_table_parser.add_argument('--thin', default=1, type=int,
                                help='''Number of samples to thin MCMC trace. For example if thin=10 every tenth sample
                                after burning will be used for inference. Default is 1.''')

build_table_parser.set_defaults(func=build_multi_sample_table)

#---------------------------------------------------------------------------------------------------------------------- 
args = parser.parse_args()

args.func(args)
